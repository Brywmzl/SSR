#! /bin/bash
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH
clear
echo
echo

#Current folder
cur_dir=`pwd`
# Stream Ciphers
ciphers=(
aes-256-gcm
aes-192-gcm
aes-128-gcm
aes-256-ctr
aes-192-ctr
aes-128-ctr
aes-256-cfb
aes-192-cfb
aes-128-cfb
camellia-128-cfb
camellia-192-cfb
camellia-256-cfb
chacha20-ietf-poly1305
chacha20-ietf
chacha20
rc4-md5
)
# Get public IP address
IP=$(ip addr | egrep -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | egrep -v "^192\.168|^172\.1[6-9]\.|^172\.2[0-9]\.|^172\.3[0-2]\.|^10\.|^127\.|^255\.|^0\." | head -n 1)
if [[ "$IP" = "" ]]; then
    IP=$(wget -qO- -t1 -T2 ipv4.icanhazip.com)
fi

# Make sure only root can run our script
function rootness(){
    if [[ $EUID -ne 0 ]]; then
       echo "Error:This script must be run as root!" 1>&2
       exit 1
    fi
}

# Check OS
function checkos(){
    if [ -f /etc/redhat-release ];then
        OS='CentOS'
    elif [ ! -z "`cat /etc/issue | grep bian`" ];then
        OS='Debian'
    elif [ ! -z "`cat /etc/issue | grep Ubuntu`" ];then
        OS='Ubuntu'
    else
        echo "Not support OS, Please reinstall OS and retry!"
        exit 1
    fi
}

# Get version
function getversion(){
    if [[ -s /etc/redhat-release ]];then
        grep -oE  "[0-9.]+" /etc/redhat-release
    else    
        grep -oE  "[0-9.]+" /etc/issue
    fi    
}

# CentOS version
function centosversion(){
    local code=$1
    local version="`getversion`"
    local main_ver=${version%%.*}
    if [ $main_ver == $code ];then
        return 0
    else
        return 1
    fi        
}

# Disable selinux
function disable_selinux(){
if [ -s /etc/selinux/config ] && grep 'SELINUX=enforcing' /etc/selinux/config; then
    sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config
    setenforce 0
fi
}

# Pre-installation settings
function pre_install(){
    # Not support CentOS 5
    if centosversion 5; then
        echo "Not support CentOS 5, please change OS to CentOS 6+/Debian 7+/Ubuntu 12+ and retry."
        exit 1
    fi
    # Set ShadowsocksR config password
    read -p "设置连接密码 (默认: zCloud):" shadowsockspwd
    [ -z "$shadowsockspwd" ] && shadowsockspwd="zCloud"
    echo
    echo "---------------------------"
    echo "password = $shadowsockspwd"
    echo "---------------------------"
    echo
    # Set ShadowsocksR config port
    while true
    do
    
       # 设置加密
    while true
    do
    echo -e "设置加密方式 (默认: chacha20):"
    for ((i=1;i<=${#ciphers[@]};i++ )); do
        hint="${ciphers[$i-1]}"
        echo -e "${green}${i}${plain}) ${hint}"
    done
    read -p "Which cipher you'd select(Default: ${ciphers[0]}):" pick
    [ -z "$pick" ] && pick=15
    expr ${pick} + 1 &>/dev/null
    if [ $? -ne 0 ]; then
        echo -e "[${red}Error${plain}] Please enter a number"
        continue
    fi
    if [[ "$pick" -lt 1 || "$pick" -gt ${#ciphers[@]} ]]; then
        echo -e "[${red}Error${plain}] Please enter a number between 1 and ${#ciphers[@]}"
        continue
    fi
    shadowsockscipher=${ciphers[$pick-1]}
    echo
    echo "---------------------------"
    echo "加密方式 = ${shadowsockscipher}"
    echo "---------------------------"
    echo
    break
    done
    
    # 设置SSR端口
    echo "------------------------------------------------------"
    echo -e " !!! 端口范围 [1-65535] !!!"
    read -p "设置远程端口1 (默认:80 ):" diosssrport1
    [ -z "$diosssrport1" ] && diosssrport1="80"
    expr $diosssrport1 + 0 &>/dev/null
    if [ $? -eq 0 ]; then
        if [ $diosssrport1 -ge 1 ] && [ $diosssrport1 -le 65535 ]; then
                echo
                echo "---------------------------"
                echo -e "远程端口1 : $diosssrport1"
                echo "---------------------------"
                echo
            break
        else
        echo -e "\033[31m 错误：请正确设置端口为1-65535之间的数字 \033[0m"
        fi
    else
        echo -e "\033[31m 错误：请正确设置端口为1-65535之间的数字 \033[0m"
        fi
        done
        
    while true
    do
            read -p "设置远程端口2 (默认: 8080):" diosssrport2
    [ -z "$diosssrport2" ] && diosssrport2="8080"
    expr $diosssrport2 + 0 &>/dev/null
    if [ $? -eq 0 ]; then
        if [ $diosssrport2 -ge 1 ] && [ $diosssrport2 -le 65535 ]; then
                echo
                echo "---------------------------"
                echo -e "远程端口2 : $diosssrport2"
                echo "---------------------------"
                echo
            break
        else
            echo -e "\033[31m 错误：请正确设置端口为1-65535之间的数字 \033[0m"
        fi
    else
        echo -e "\033[31m错误：请正确设置端口为1-65535之间的数字 \033[0m"
        fi
        done
        
    while true
    do
            read -p "设置远程端口3 (默认: 443 ):" diosssrport3
    [ -z "$diosssrport3" ] && diosssrport3="443"
    expr $diosssrport3 + 0 &>/dev/null
    if [ $? -eq 0 ]; then
        if [ $diosssrport3 -ge 1 ] && [ $diosssrport3 -le 65535 ]; then
                echo
                echo "---------------------------"
                echo -e "远程端口3 : $diosssrport3"
                echo "---------------------------"
                echo
            break
        else
            echo -e "\033[31m 错误：请正确设置端口为1-65535之间的数字 \033[0m"
        fi
    else
        echo -e "\033[31m 错误：请正确设置端口为1-65535之间的数字 \033[0m"
        fi
   done

    get_char(){
        SAVEDSTTY=`stty -g`
        stty -echo
        stty cbreak
        dd if=/dev/tty bs=1 count=1 2> /dev/null
        stty -raw
        stty echo
        stty $SAVEDSTTY
    }
    echo
    echo "Press any key to start...or Press Ctrl+C to cancel"
    char=`get_char`
    # Install necessary dependencies
    if [ "$OS" == 'CentOS' ]; then
        yum install -y wget unzip openssl-devel gcc swig python python-devel python-setuptools autoconf libtool libevent git ntpdate
        yum install -y m2crypto automake make curl curl-devel zlib-devel perl perl-devel cpio expat-devel gettext-devel
    else
        apt-get -y update
        apt-get -y install python python-dev python-pip python-m2crypto curl wget unzip gcc swig automake make perl cpio build-essential git ntpdate
    fi
    cd $cur_dir
}

# Download files
function download_files(){
    # Download libsodium file
    if ! wget --no-check-certificate -O libsodium-1.0.16.tar.gz https://github.com/Brywmzl/SSR/raw/master/libsodium-1.0.16.tar.gz; then
        echo "下载libsodium失败!"
        exit 1
    fi
    # Download ShadowsocksR file
    # if ! wget --no-check-certificate -O manyuser.zip https://github.com/Brywmzl/SSR/raw/master/manyuser.zip; then
        # echo "Failed to download ShadowsocksR file!"
        # exit 1
    # fi
    # Download ShadowsocksR chkconfig file
    if [ "$OS" == 'CentOS' ]; then
        if ! wget --no-check-certificate https://github.com/Brywmzl/SSR/raw/master/shadowsocksR -O /etc/init.d/shadowsocks; then
            echo "下载ShadowsocksR chkconfig失败!"
            exit 1
        fi
    else
        if ! wget --no-check-certificate https://github.com/Brywmzl/SSR/raw/master/shadowsocksR-debian -O /etc/init.d/shadowsocks; then
            echo "下载ShadowsocksR chkconfig失败!"
            exit 1
        fi
    fi
}

# firewall set
function firewall_set(){
    echo "firewall set start..."
    if centosversion 6; then
        /etc/init.d/iptables status > /dev/null 2>&1
        if [ $? -eq 0 ]; then
            iptables -L -n | grep '${shadowsocksport}' | grep 'ACCEPT' > /dev/null 2>&1
            if [ $? -ne 0 ]; then
                iptables -I INPUT -m state --state NEW -m tcp -p tcp --dport ${shadowsocksport} -j ACCEPT
                iptables -I INPUT -m state --state NEW -m udp -p udp --dport ${shadowsocksport} -j ACCEPT
                /etc/init.d/iptables save
                /etc/init.d/iptables restart
            else
                echo "port ${shadowsocksport} has been set up."
            fi
        else
            echo "WARNING: iptables looks like shutdown or not installed, please manually set it if necessary."
        fi
    elif centosversion 7; then
        systemctl status firewalld > /dev/null 2>&1
        if [ $? -eq 0 ];then
            firewall-cmd --permanent --zone=public --add-port=${shadowsocksport}/tcp
            firewall-cmd --permanent --zone=public --add-port=${shadowsocksport}/udp
            firewall-cmd --reload
        else
            echo "Firewalld looks like not running, try to start..."
            systemctl start firewalld
            if [ $? -eq 0 ];then
                firewall-cmd --permanent --zone=public --add-port=${shadowsocksport}/tcp
                firewall-cmd --permanent --zone=public --add-port=${shadowsocksport}/udp
                firewall-cmd --reload
            else
                echo "WARNING: Try to start firewalld failed. please enable port ${shadowsocksport} manually if necessary."
            fi
        fi
    fi
    echo "firewall set completed..."
}

# Config ShadowsocksR
function config_shadowsocks(){
    cat > /etc/shadowsocks.json<<-EOF
{
    "server":"0.0.0.0",
    "server_ipv6": "::",
    "local_address":"127.0.0.1",
    "local_port":1080,
    "port_password":{
        "${diosssrport1}":"${shadowsockspwd}",
        "${diosssrport2}":"${shadowsockspwd}",
        "${diosssrport3}":"${shadowsockspwd}"
    },
    "timeout":300,
    "method":"${shadowsockscipher}",
    "protocol": "auth_sha1_compatible",
    "protocol_param": "",
    "obfs": "http_simple_compatible",
    "obfs_param": "",
    "redirect": "",
    "dns_ipv6": false,
    "fast_open": false,
    "workers": 1
}
EOF
}

# Install ShadowsocksR
function install_ss(){
    # Install libsodium
    tar zxf libsodium-1.0.16.tar.gz
    cd $cur_dir/libsodium-1.0.16
    ./configure && make && make install
    echo "/usr/local/lib" > /etc/ld.so.conf.d/local.conf
    ldconfig
    # Install ShadowsocksR
    cd $cur_dir
    wget https://github.com/Brywmzl/SSR/raw/master/shadowsocks-manyuser.zip
     unzip -q shadowsocks-manyuser.zip
     mv shadowsocks-manyuser /usr/local/shadowsocks/
    #git clone -b manyuser https://github.com/breakwa11/shadowsocks.git /usr/local/shadowsocks
    if [ -f /usr/local/shadowsocks/server.py ]; then
        chmod +x /etc/init.d/shadowsocks
        # Add run on system start up
        if [ "$OS" == 'CentOS' ]; then
            chkconfig --add shadowsocks
            chkconfig shadowsocks on
        else
            update-rc.d -f shadowsocks defaults
        fi
        # Run ShadowsocksR in the background
        /etc/init.d/shadowsocks start
        clear
        echo
        echo -e "\033[36m 部署完成！\033[0m"
        echo
        echo -e "服务器IP: \033[32m ${IP} \033[0m"
        echo -e "远程端口: \033[32m ${diosssrport1}；${diosssrport2}；${diosssrport3} \033[0m"
        echo -e "连接密码: \033[32m ${shadowsockspwd} \033[0m"
        echo -e "加密方法: \033[32m ${shadowsockscipher} \033[0m"
        echo -e "本地的IP: \033[32m 127.0.0.1 \033[0m"
        echo -e "本地端口: \033[32m 1080 \033[0m"
        echo -e "认证协议: \033[32m auth_sha1 \033[0m"
        echo -e "混淆方式: \033[32m http_simple \033[0m"
        echo
        echo
    else
        echo "Shadowsocks安装失败!"
        install_cleanup
        exit 1
    fi
}

#改成北京时间
function check_datetime(){
	rm -rf /etc/localtime
	ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
	ntpdate 1.cn.pool.ntp.org
}

# Install cleanup
function install_cleanup(){
    cd $cur_dir
    rm -f manyuser.zip
    rm -rf shadowsocks-manyuser
    rm -f libsodium-1.0.16.tar.gz
    rm -rf libsodium-1.0.16
}


# Uninstall ShadowsocksR
function uninstall_shadowsocks(){
    printf "你确定卸载shadowsocksr？ (y/n) "
    printf "\n"
    read -p "(Default: n):" answer
    if [ -z $answer ]; then
        answer="n"
    fi
    if [ "$answer" = "y" ]; then
        /etc/init.d/shadowsocks status > /dev/null 2>&1
        if [ $? -eq 0 ]; then
            /etc/init.d/shadowsocks stop
        fi
        checkos
        if [ "$OS" == 'CentOS' ]; then
            chkconfig --del shadowsocks
        else
            update-rc.d -f shadowsocks remove
        fi
        rm -f /etc/shadowsocks.json
        rm -f /etc/init.d/shadowsocks
        rm -rf /usr/local/shadowsocks
        echo "ShadowsocksR uninstall success!"
    else
        echo "uninstall cancelled, Nothing to do"
    fi
}


# Install ShadowsocksR
function install_shadowsocks(){
    checkos
    rootness
    disable_selinux
    pre_install
    download_files
    config_shadowsocks
    install_ss
    if [ "$OS" == 'CentOS' ]; then
        firewall_set > /dev/null 2>&1
    fi
	check_datetime
    install_cleanup
	
}

# Initialization step
action=$1
[ -z $1 ] && action=install
case "$action" in
install)
    install_shadowsocks
    ;;
uninstall)
    uninstall_shadowsocks
    ;;
*)
    echo "Arguments error! [${action} ]"
    echo "Usage: `basename $0` {install|uninstall}"
    ;;
esac